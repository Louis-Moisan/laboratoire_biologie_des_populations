# if first time step use initial abundance as population size
population_size <- initial_abundance
} else {
#--- Environmental stochasticity
#Adjust growth rate based on standard deviation of R (environmental stochasticity)
growth_rate_annual <- rnorm(1, mean = (fecundity+survival), sd = standard_deviation_R)
#If growth rate is less than 0 set at 0
growth_rate_annual <- ifelse(growth_rate_annual < 0, 0, growth_rate_annual)
#Estimate population size at next step using new growth rate
population_size <- round(population_size * growth_rate_annual, digits=0)
output_df <- rbind(output_df, data.frame(Time = t, Population = population_size, Replicate = i))
}
}
}
}
return(output_df)
}
test <- exponential_growth(
duration=12, #Number of time step
initial_abundance=31, #Initial population abundance
survival=0.921, #Average survival rate
fecundity=1.148, #Average fecundity rate
standard_deviation_R= 0.075, #Equivalent of environmental stochasticity
demographic_stochasticity=FALSE, #TRUE or FALSE
number_replicates=1)
#---------------------#
#### Run the model ####
#---------------------#
# Create a data frame to store the output
output_df <- data.frame()
number_replicates
#----------------------------#
#### Set model parameters ####
#----------------------------#
#time steps
time_steps <- seq(0, duration)
#if replicate set at 0, then automatically run only a single determinist simulation
if(number_replicates == 0) {
number_replicates <- 1
demographic_stochasticity <- FALSE #set demographic stochasticity to null
standard_deviation_R <- 0 #set environmental stochasticity to null
}
#---------------------#
#### Run the model ####
#---------------------#
# Create a data frame to store the output
output_df <- data.frame()
i=1
t=0
time_steps
t == 0
# if first time step use initial abundance as population size
population_size <- initial_abundance
population_size
#--- Environmental stochasticity
#Adjust growth rate based on standard deviation of R (environmental stochasticity)
growth_rate_annual <- rnorm(1, mean = (fecundity+survival), sd = standard_deviation_R)
#If growth rate is less than 0 set at 0
growth_rate_annual <- ifelse(growth_rate_annual < 0, 0, growth_rate_annual)
#-------------------------------------------------------#
#### Function to model population exponential growth ####
#-------------------------------------------------------#
exponential_growth <- function(
duration, #Number of time step
initial_abundance, #Initial population abundance
survival, #Average survival rate
fecundity, #Average fecundity rate
standard_deviation_R, #Equivalent of environmental stochasticity
demographic_stochasticity, #TRUE or FALSE
number_replicates) #number of simulation to be run, only useful when using stochasticity
{
#----------------------------#
#### Set model parameters ####
#----------------------------#
#time steps
time_steps <- seq(0, duration)
#if replicate set at 0, then automatically run only a single determinist simulation
if(number_replicates == 0) {
number_replicates <- 1
demographic_stochasticity <- FALSE #set demographic stochasticity to null
standard_deviation_R <- 0 #set environmental stochasticity to null
}
#---------------------#
#### Run the model ####
#---------------------#
# Create a data frame to store the output
output_df <- data.frame()
#If demographic stochasticity is considered
if(demographic_stochasticity == TRUE){
#For each simulation (or replicate)
for (i in 1:number_replicates){
#And for each time step
for (t in time_steps){
#if time step is 0 define population size as initial population size
if (t == 0) {
population_size <- initial_abundance
#else estimate population size at next time step
} else {
#If population was at 0 last step (extinct) skip next steps population size will be maintained at 0
if(population_size==0){
population_size= 0
#If not, calculate population size while considering stochasticity
} else {
#--- Environmental stochasticity ---#
#Adjust annual survival based on standard deviation of R (environmental stochasticity)
survival_annual <- rnorm(1, mean = survival, sd = standard_deviation_R)
#If survival is less than 0 set at 0 and if survival is more than 1 set to 1
survival_annual <- ifelse(survival_annual < 0, 0, ifelse(survival_annual > 1, 1, survival_annual))
#Adjust annual fecundity based on standard deviation of R (environmental stochasticity)
fecundity_annual<- rnorm(1, mean = fecundity, sd = standard_deviation_R)
fecundity_annual <- ifelse(fecundity_annual < 0, 0, fecundity_annual)
#--- Demographic stochasticity ---#
#calculate the number of survivor annually using a binomial distribution (yes or no)
survivors <- round(rbinom(population_size, 1, survival_annual), digits = 0)
#calculate the number of offspring annually using a poisson distribution (left skewed)
offspring <- round(rpois(sum(survivors), fecundity_annual), digits = 0)
#Recalculate total annual population size
population_size <- sum(survivors) + sum(offspring)
}
}
#--- Add the data of the given time step and simulation in the data frame
output_df <- rbind(output_df, data.frame(Time = t, Population = population_size, Replicate = i))
}
}
# If demographic stochasticity is set to FALSE, then run a determinist simulation
}else {
for (i in 1:number_replicates) {
for (t in time_steps) { # Loop over each time step
if (t == 0) {
# if first time step use initial abundance as population size
population_size <- initial_abundance
} else {
#--- Environmental stochasticity
#Adjust growth rate based on standard deviation of R (environmental stochasticity)
growth_rate_annual <- rnorm(1, mean = (fecundity+survival), sd = standard_deviation_R)
#If growth rate is less than 0 set at 0
growth_rate_annual <- ifelse(growth_rate_annual < 0, 0, growth_rate_annual)
#Estimate population size at next step using new growth rate
population_size <- round(population_size * growth_rate_annual, digits=0)
}
output_df <- rbind(output_df, data.frame(Time = t, Population = population_size, Replicate = i))
}
}
}
return(output_df)
}
test <- exponential_growth(
duration=12, #Number of time step
initial_abundance=31, #Initial population abundance
survival=0.921, #Average survival rate
fecundity=1.148, #Average fecundity rate
standard_deviation_R= 0.075, #Equivalent of environmental stochasticity
demographic_stochasticity=FALSE, #TRUE or FALSE
number_replicates=1)
View(test)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
data_frame= exponential_growth(duration=12,
initial_abundance = 31,
survival = 0.921,
fecundity=1.148,
standard_deviation_R = 0.075,
demographic_stochasticity = TRUE,
number_replicates =25)
View(data_frame)
data_frame_summary <- data_frame %>%
dplyr::group_by(Replicate) %>%
dplyr::summarise(minimum= min(Population))
View(data_frame_summary)
data_frame= exponential_growth(duration=5,
initial_abundance = 31,
survival = 0.921,
fecundity=1.148,
standard_deviation_R = 0.075,
demographic_stochasticity = TRUE,
number_replicates =25)
data_frame_summary <- data_frame %>%
dplyr::filter(Time>0) %>%
dplyr::group_by(Replicate) %>%
dplyr::summarise(minimum= min(Population))
View(data_frame_summary)
data_frame_summary <- data_frame %>%
dplyr::filter(Time>0) %>%
dplyr::group_by(Replicate) %>%
dplyr::summarise(minimum= min(Population)) %>%
dplyr::arrange(Population)
data_frame_summary <- data_frame %>%
dplyr::filter(Time>0) %>%
dplyr::group_by(Replicate) %>%
dplyr::summarise(minimum= min(Population)) %>%
dplyr::arrange(minimum)
View(data_frame_summary)
data_frame_summary <- data_frame %>%
dplyr::filter(Time>0) %>%
dplyr::group_by(Replicate) %>%
dplyr::summarise(minimum= min(Population)) %>%
dplyr::arrange(minimum) %>%
dplyr::group_by(minimum) %>%
dplyr::summarise(n= n())
View(data_frame_summary)
data_frame_summary
data_frame_summary <- data_frame %>%
dplyr::filter(Time>0) %>%
dplyr::group_by(Replicate) %>%
dplyr::summarise(minimum= min(Population)) %>%
dplyr::arrange(minimum) %>%
dplyr::group_by(minimum) %>%
dplyr::summarise(n= n(), cumulative_n= cumsum(n))
data_frame_summary <- data_frame %>%
dplyr::filter(Time>0) %>%
dplyr::group_by(Replicate) %>%
dplyr::summarise(minimum= min(Population)) %>%
dplyr::arrange(minimum) %>%
dplyr::group_by(minimum) %>%
dplyr::summarise(ni= n(), cumulative_n= cumsum(ni))
data_frame_summary <- data_frame %>%
dplyr::filter(Time>0) %>%
dplyr::group_by(Replicate) %>%
dplyr::summarise(minimum= min(Population)) %>%
dplyr::arrange(minimum)
View(data_frame_summary)
data_frame_summary <- data_frame %>%
dplyr::filter(Time>0) %>%
dplyr::group_by(Replicate) %>%
dplyr::summarise(minimum= min(Population)) %>%
dplyr::arrange(minimum) %>%
dplyr::group_by(minimum) %>%
dplyr::summarise(frequency= n(), cumulative_frequency= cumsum(frequency))
data_frame_summary <- data_frame %>%
dplyr::filter(Time>0) %>%
dplyr::group_by(Replicate) %>%
dplyr::summarise(minimum= min(Population)) %>%
dplyr::arrange(minimum) %>%
dplyr::group_by(minimum) %>%
dplyr::summarise(frequency= n()) %>%
dplyr::ungroup()
data_frame_summary <- data_frame %>%
dplyr::filter(Time>0) %>%
dplyr::group_by(Replicate) %>%
dplyr::summarise(minimum= min(Population)) %>%
dplyr::arrange(minimum) %>%
dplyr::group_by(minimum) %>%
dplyr::summarise(frequency= n()) %>%
dplyr::ungroup() %>%
dplyr::mutate(cumsum(frequency))
data_frame_summary <- data_frame %>%
dplyr::filter(Time>0) %>%
dplyr::group_by(Replicate) %>%
dplyr::summarise(minimum= min(Population)) %>%
dplyr::arrange(minimum) %>%
dplyr::group_by(minimum) %>%
dplyr::summarise(frequency= n()) %>%
dplyr::ungroup() %>%
dplyr::mutate(cumulative_freq=cumsum(frequency))
number_replicates= length(unique(data_frame$Replicate))
number_replicates
data_frame_summary <- data_frame %>%
dplyr::filter(Time>0) %>%
dplyr::group_by(Replicate) %>%
dplyr::summarise(minimum= min(Population)) %>%
dplyr::arrange(minimum) %>%
dplyr::group_by(minimum) %>%
dplyr::summarise(frequency= n()) %>%
dplyr::ungroup() %>%
dplyr::mutate(cumulative_freq=cumsum(frequency)) %>%
dplyr::mutate(probability= cumulative_freq/number_replicates)
data_frame_summary <- data_frame %>%
dplyr::filter(Time>0) %>%
dplyr::group_by(Replicate) %>%
dplyr::summarise(minimum= min(Population)) %>%
dplyr::arrange(minimum) %>%
dplyr::group_by(minimum) %>%
dplyr::summarise(frequency= n()) %>%
dplyr::ungroup() %>%
dplyr::mutate(cumulative_freq=cumsum(frequency)) %>%
dplyr::mutate(probability= cumulative_freq/number_replicates) %>%
dplyr::select(minimum, probability)
source("functions/extinction_decline.R")
runApp()
runApp()
rnorm(1, mean = 0.921, sd = 0.075)
(fecundity+survival)
#--- Environmental stochasticity ---#
rnorm(1, mean = (0.921+1.148), sd= 0.075)
#--- Environmental stochasticity ---#
rnorm(1, mean = (0.921+1.148), sd= 0.075)
#--- Environmental stochasticity ---#
rnorm(1, mean = (0.921+1.148), sd= 0.075)
#--- Environmental stochasticity
#Adjust growth rate based on standard deviation of R (environmental stochasticity)
growth_rate_annual <- rnorm(1, mean = (fecundity+survival), sd = standard_deviation_R)
(0.921+1.148)
runApp()
runApp()
#--- Environmental stochasticity ---#
survival= 0.921
fecundity= 1.148
standard_deviation_R= 0.075
coef_environmental_stochas <-  rnorm(1, mean = (survival+fecundity), sd = standard_deviation_R)
coef_environmental_stochas
#--- Environmental stochasticity ---#
survival= 0.921
fecundity= 0.227
standard_deviation_R= 0.075
coef_environmental_stochas <-  rnorm(1, mean = (survival+fecundity), sd = standard_deviation_R)
coef_environmental_stochas
R_annual <-  rnorm(1, mean = (survival+fecundity), sd = standard_deviation_R)
rnorm(1, mean = (survival+fecundity), sd = standard_deviation_R)
coef_environmental_stochas <- R_annual/(survival+fecundity)
coef_environmental_stochas
R_annual <-  rnorm(1, mean = (survival+fecundity), sd = standard_deviation_R)
R_annual
coef_environmental_stochas <- R_annual/(survival+fecundity)
coef_environmental_stochas
R_annual <-  rnorm(1, mean = (survival+fecundity), sd = standard_deviation_R)
R_annual
R_annual <-  rnorm(1, mean = (survival+fecundity), sd = standard_deviation_R)
R_annual
coef_environmental_stochas <- R_annual/(survival+fecundity)
coef_environmental_stochas
R_annual <-  rnorm(1, mean = (survival+fecundity), sd = standard_deviation_R)
R_annual
R_annual
R_annual <-  rnorm(1, mean = (survival+fecundity), sd = standard_deviation_R)
R_annual
R_annual <-  rnorm(1, mean = (survival+fecundity), sd = standard_deviation_R)
R_annual
coef_environmental_stochas <- R_annual/(survival+fecundity)
coef_environmental_stochas
runApp()
rpois(31, 0.31)
round(rpois(31, 0.31), 0)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
numeric(0)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#---------------------------------------------------------------#
#### Function to calculate probability of extinction decline ####
#---------------------------------------------------------------#
explosion_increase <- function(
data_frame){ # A given data frame with a column Time, Population and Replicate
#Extract the number of replicates
number_replicates= length(unique(data_frame$Replicate))
#Calculate probability of going under a given population treshold
explosion_increase_df <- data_frame %>%
#Remove initial population size
dplyr::filter(Time>0) %>%
#Retain only the minimum reach in each simulation or replicate
dplyr::group_by(Replicate) %>%
dplyr::summarise(maximum= max(Population)) %>%
#Order the minimum values
dplyr::arrange(maximum) %>%
#Extract the number of times the minimum has been reached
dplyr::group_by(maximum) %>%
dplyr::summarise(frequency= n()) %>%
dplyr::ungroup() %>%
#Calculate the cumulative frequency
dplyr::mutate(cumulative_freq=cumsum(frequency)) %>%
#Transform into probability by dividing with the total number of replicates
dplyr::mutate(probability= cumulative_freq/number_replicates) %>%
dplyr::select(maximum, probability)
return(explosion_increase_df)
}
runApp()
runApp()
#Faire rouler le script pour l'interface de l'utilisateur
source("ui.R")
#Faire rouler le script pour les graphiques et tableaux dynamiques
source("server.R")
# Run the application
shinyApp(ui = ui, server = server)
shiny::runApp()
runApp()
data_2_4_3 = data.frame(
Parameter = c("Abondance initiale (N)", "Taux de croissance (R)", "Taux de survie (s)", "Écart-type de R"),
Valeur_originale = c(31, 1.148, 0.921, 0.075),
Valeur_basse = c(28, rep(NA, times= 3)),
Valeur_haute = c(34, rep(NA, times= 3))
)
View(data_2_4_3)
runApp()
data_2_4_3 = data.frame(
Parameter = c("Abondance initiale (N)", "Taux de croissance (R)", "Taux de survie (s)", "Écart-type de R"),
valeur_originale = c(31, 1.148, 0.921, 0.075),
valeur_basse = c(28, rep(NA, times= 3)),
valeur_haute = c(34, rep(NA, times= 3))
)
View(data_2_4_3)
View(data_2_4_3)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
rbinom(31, 1, 0.921)
#--- Demographic stochasticity ---#
#calculate the number of survivor annually using a binomial distribution (yes or no)
rbinom(31, 0, 0.921)
#--- Demographic stochasticity ---#
#calculate the number of survivor annually using a binomial distribution (yes or no)
rbinom(31, 1, 0.921)
#--- Demographic stochasticity ---#
#calculate the number of survivor annually using a binomial distribution (yes or no)
rbinom(31, 2, 0.921)
#--- Demographic stochasticity ---#
#calculate the number of survivor annually using a binomial distribution (yes or no)
rbinom(31, 1, 0.921)
#--- Demographic stochasticity ---#
#calculate the number of survivor annually using a binomial distribution (yes or no)
rbinom(31, 1, 0.921)
#--- Demographic stochasticity ---#
#calculate the number of survivor annually using a binomial distribution (yes or no)
rbinom(31, 1, 0.921)
#--- Demographic stochasticity ---#
#calculate the number of survivor annually using a binomial distribution (yes or no)
rbinom(31, 1, 0.921)
#--- Demographic stochasticity ---#
#calculate the number of survivor annually using a binomial distribution (yes or no)
sum(rbinom(31, 1, 0.921))
#--- Demographic stochasticity ---#
#calculate the number of survivor annually using a binomial distribution (yes or no)
sum(rbinom(31, 1, 0.921))
#--- Demographic stochasticity ---#
#calculate the number of survivor annually using a binomial distribution (yes or no)
sum(rbinom(31, 1, 0.921))
#--- Demographic stochasticity ---#
#calculate the number of survivor annually using a binomial distribution (yes or no)
sum(rbinom(31, 1, 0.921))
#--- Demographic stochasticity ---#
#calculate the number of survivor annually using a binomial distribution (yes or no)
sum(rbinom(31, 1, 0.921))
fecundity_annual
rpois(sum(survivors), fecundity_annual)
runApp()
rpois(31, 0.227)
rpois(31, 0.227)
rpois(31, 0.227)
rpois(31, 0.227)
rpois(31, 0.227)
rpois(31, 0.227)
rpois(31, 0.227)
rpois(31, 0.227)
rpois(31, 0.227)
rpois(31, 0.227)
rpois(31, 0.227)
rpois(31, 0.227)
#calculate the number of offspring annually using a poisson distribution (left skewed)
rpois(31, 0.5)
offspring <- rpois(sum(survivors), fecundity_annual)
rpois(31, 0.5)
rpois(31, 0.5)
rpois(31, 0.5)
rpois(31, 0.5)
#calculate the number of offspring annually using a poisson distribution (left skewed)
rpois(31, 0.227)
#calculate the number of offspring annually using a poisson distribution (left skewed)
rpois(31, 0.227)
offspring <- rpois(sum(survivors), fecundity_annual)
#calculate the number of offspring annually using a poisson distribution (left skewed)
rpois(31, 0.227)
#calculate the number of offspring annually using a poisson distribution (left skewed)
rpois(31, 0.227)
#calculate the number of offspring annually using a poisson distribution (left skewed)
rpois(31, 0.227)
#calculate the number of offspring annually using a poisson distribution (left skewed)
sum(rpois(31, 0.227))
#--- Environmental stochasticity ---#
survival= 0.921
fecundity= 0.227
R_annual <-  rnorm(1, mean = (survival+fecundity), sd = standard_deviation_R)
standard_deviation_R= 0.075
R_annual <-  rnorm(1, mean = (survival+fecundity), sd = standard_deviation_R)
R_annual
coef_environmental_stochas <- R_annual/(survival+fecundity)
coef_environmental_stochas
survival_annual <- survival*coef_environmental_stochas
R_annual- (survival+fecundity)
survival_annual2 <- survival*exp(R_annual- (survival+fecundity))
survival_annual
survival_annual2
#Adjust annual fecundity based on standard deviation of R (environmental stochasticity)
fecundity_annual<- fecundity*coef_environmental_stochas
fecundity_annual2<- fecundity*exp(R_annual- (survival+fecundity))
fecundity_annual
fecundity_annual2
survival_annual+fecundity_annual
R_annual
survival_annual2+fecundity_annual2
runApp()
shiny::runApp()
