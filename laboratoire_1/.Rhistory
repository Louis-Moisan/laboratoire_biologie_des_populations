),
#--- Boîte pour saisir taux de croissance, taille pop init et pas de temps
box(width = 4,
numericInput("taux_survie_C", "Taux de survie (s)", value= 1),
numericInput("taux_fecondite_C", "Taux de fécondité (s)", value= 1),
numericInput("population_initiale_C", "Taille de population initiale (N)", value = 1),
numericInput("time_steps_C", "Temps (t)", value = 1)
)
),
#--- Ajouter un tableau dynamique avec les résultats du graphique
fluidRow(
style = "margin-bottom: 100px;",
box(width = 8,
dataTableOutput("population_table_C")
)
)
),
#------------------#
#### Exercice D ####
#------------------#
tabItem(tabName = "exercise_d",
fluidRow(
#Définir le titre de section
titlePanel("Exercice D: Modélisation du rétablissement des baleines bleues"),
style = "text-align: justify; font-size: 16px; margin-bottom: 10px;",
box(width = 12,
#Ajouter la mise en contexte
p("La baleine bleue est peut-être le plus grand animal n’ayant jamais vécu sur terre, mesurant jusqu’à 33 mètres (110 pieds) et pesant jusqu’à 17 tonnes (38000 livres). Il y a 3 populations distinctes de baleines bleues, soit celles habitant l’Atlantique Nord, le Pacifique Nord et l’hémisphère sud. Les 2 populations nordiques restent isolées l’une de l’autre de part les continents séparant les 2 océans. Les populations du nord et du sud restent également isolées les unes des autres, car chacune migre vers les tropiques seulement durant les mois froids de leur hémisphère respectif. Avant l’exploitation par l’homme, 90% des baleines bleues vivait dans l’hémisphère sud, avec un effectif de 150 000 à 210 000 individus. Au cours des deux derniers siècles, les activités de chasse ont fait pression essentiellement sur cette population."),
p("Au milieu des années 1920, les technologies de chasse se sont développées. Cela améliora nettement l’efficacité des baleiniers et marqua le début du déclin de la baleine bleue. Les baleines étaient chassées pour leur viande et leur gras. Après 10 ans de chasse, la population a chuté pour atteindre un effectif entre 20 000 et 50 000 individus. En 1965, il ne restait que 14 000 individus et plusieurs pays décidèrent de stopper la chasse par peur d’assister à l’extinction de la baleine bleue."),
p("Malgré la diminution de la pression de chasse, la baleine bleue a eu du mal à se rétablir à partir de son petit effectif. Le refus de certains pays d’arrêter la pêche et l’augmentation de la récolte du krill, une petite crevette représentant la principale ressource alimentaire des baleines, ont rendu difficile le rétablissement des baleines bleues. En 1989, on estimait qu’environ 500 individus subsistaient dans les océans de l’hémisphère sud. Néanmoins, des rapports récents et plus optimistes ont suggéré que la taille de la population serait probablement en train d’augmenter."),
p("Si la pêche au krill est contrôlée et que les pressions de la pêche se relâchent, l’habitat pourrait être plus favorable au rétablissement. On estime que les baleines bleues pourraient avoir un taux de survie annuel de 0,96 dans ces conditions. Cela signifie que chaque baleine aurait 96% de chance de survivre jusqu’à l’année suivante. Avec une augmentation tant de la survie que de la fécondité, on suppose que le taux de croissance annuel de la population de baleines serait de 1,02 à 1,10. Ces chiffres signifient que l’abondance de la population augmenterait de 2 à 10% par an. Dans cet exercice, vous simulerez le rétablissement de la population de baleines bleues avec l'application Shiny R.")
)
),
#--- Ajouter le graphique de trajectoire de population
fluidRow(
style = "margin-bottom: 40px;",
box(width = 8, #Taille du graphique
plotlyOutput("population_plot_D") # Ici indiquer le nom de l'objet du graphique dans R
),
#--- Boîte pour saisir taux de croissance, taille pop init et pas de temps
box(width = 4,
numericInput("taux_survie_D", "Taux de survie (s)", value= 1),
numericInput("taux_fecondite_D", "Taux de fécondité (s)", value= 1),
numericInput("population_initiale_D", "Taille de population initiale (N)", value = 1),
numericInput("time_steps_D", "Temps (t)", value = 1)
)
),
#--- Ajouter un tableau dynamique avec les résultats du graphique
fluidRow(
style = "margin-bottom: 100px;",
box(width = 8,
dataTableOutput("population_table_D")
)
)
)
)
)
)
# Shiny App: Laboratoire 1
# Auteur: Louis Moisan
# Date: 18 Janvier 2024
#Activer le package shinydashboard
library(shiny)
library(shinydashboard)
library(plotly)
library(DT)
library(openxlsx)
#Faire rouler le script pour l'interface de l'utilisateur
source("ui.R")
#Faire rouler le script pour les graphiques et tableaux dynamiques
source("server.R")
# Run the application
shinyApp(ui = ui, server = server)
# Shiny App: Laboratoire 1
# Auteur: Louis Moisan
# Date: 18 Janvier 2024
#Activer le package shinydashboard
library(shiny)
library(shinydashboard)
library(plotly)
library(DT)
library(openxlsx)
#Faire rouler le script pour l'interface de l'utilisateur
source("ui.R")
#Faire rouler le script pour les graphiques et tableaux dynamiques
source("server.R")
# Run the application
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
# Shiny App: Laboratoire 1
# Auteur: Louis Moisan
# Date: 18 Janvier 2024
#Faire rouler le script pour l'interface de l'utilisateur
source("ui.R")
#Faire rouler le script pour les graphiques et tableaux dynamiques
source("server.R")
# Run the application
shinyApp(ui = ui, server = server)
shiny::runApp()
c("t",c(1800, 1850, 1870, 1890, 1910, 1930, 1950, 1970, 1975, 1980, 1985, 1990, 1995))
c(rep(NA, times= 9)
rep(NA, times= 9))
rep(NA, times= 9)
c("N(t)/N(t-T)","-",1.24176, rep(NA, times=11))
data.frame(
`Année` = c("t", c(1800, 1850, 1870, 1890, 1910, 1930, 1950, 1970, 1975, 1980, 1985, 1990, 1995)),
`Population (milliards)` = c("N(t)", c(0.91, 1.13, 1.30, 1.49, 1.70, 2.02, 2.51, 3.62, 3.97, 4.41, 4.84, 5.29, 5.75)),
`Intervalle de temps` = c("T","-",c(50,20,20), c(rep(NA, times= 9))),
`Population au recensement précédent` = c("N(t-T)","-" ,c(0.91, 1.13, 1.30, 1.49, 1.70, 2.02, 2.51, 3.62, 3.97, 4.41, 4.84, 5.29)),
`Taux de croissance en T années` = c("N(t)/N(t-T)","-",1.24176, rep(NA, times=11)),
`Taux de croissance annuel (R)` = c("[N(t)/N(t-T)]^(1/T)", "-", 1.00434, rep(NA, times=11))
data.frame(
`Année` = c("t", c(1800, 1850, 1870, 1890, 1910, 1930, 1950, 1970, 1975, 1980, 1985, 1990, 1995)),
`Population (milliards)` = c("N(t)", c(0.91, 1.13, 1.30, 1.49, 1.70, 2.02, 2.51, 3.62, 3.97, 4.41, 4.84, 5.29, 5.75)),
`Intervalle de temps` = c("T","-",c(50,20,20), c(rep(NA, times= 9))),
`Population au recensement précédent` = c("N(t-T)","-" ,c(0.91, 1.13, 1.30, 1.49, 1.70, 2.02, 2.51, 3.62, 3.97, 4.41, 4.84, 5.29)),
`Taux de croissance en T années` = c("N(t)/N(t-T)","-",1.24176, rep(NA, times=11)),
`Taux de croissance annuel (R)` = c("[N(t)/N(t-T)]^(1/T)", "-", 1.00434, rep(NA, times=11)))
runApp()
runApp()
library(knitr)
data %>%
kable()
# Data frame defined directly within renderTable or you could use a pre-defined data frame
data <-   data.frame(
`Année` = c("t", c(1800, 1850, 1870, 1890, 1910, 1930, 1950, 1970, 1975, 1980, 1985, 1990, 1995)),
`Population (milliards)` = c("N(t)", c(0.91, 1.13, 1.30, 1.49, 1.70, 2.02, 2.51, 3.62, 3.97, 4.41, 4.84, 5.29, 5.75)),
`Intervalle de temps` = c("T","-",c(50,20,20), c(rep(NA, times= 9))),
`Population au recensement précédent` = c("N(t-T)","-" ,c(0.91, 1.13, 1.30, 1.49, 1.70, 2.02, 2.51, 3.62, 3.97, 4.41, 4.84, 5.29)),
`Taux de croissance en T années` = c("N(t)/N(t-T)","-",1.24176, rep(NA, times=11)),
`Taux de croissance annuel (R)` = c("[N(t)/N(t-T)]^(1/T)", "-", 1.00434, rep(NA, times=11))
)
data %>%
kable()
kable(data)
kable(data, align = "lccrr")
runApp()
kable(data, align = "lccrr", "html")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
table_1_3_df <- data.frame(
`Année` = c("t", c(1800, 1850, 1870, 1890, 1910, 1930, 1950, 1970, 1975, 1980, 1985, 1990, 1995)),
`Population (milliards)` = c("N(t)", c(0.91, 1.13, 1.30, 1.49, 1.70, 2.02, 2.51, 3.62, 3.97, 4.41, 4.84, 5.29, 5.75)),
`Intervalle de temps` = c("T","-",c(50,20,20), c(rep(NA, times= 9))),
`Population au recensement précédent` = c("N(t-T)","-" ,c(0.91, 1.13, 1.30, 1.49, 1.70, 2.02, 2.51, 3.62, 3.97, 4.41, 4.84, 5.29)),
`Taux de croissance en T années` = c("N(t)/N(t-T)","-",1.24176, rep(NA, times=11)),
`Taux de croissance annuel (R)` = c("[N(t)/N(t-T)]^(1/T)", "-", 1.00434, rep(NA, times=11)),
# Avoid converting strings to factors
stringsAsFactors = FALSE)
View(table_1_3_df)
#--- Table 1.3
table_1_3_df <- data.frame(
`Année` = c("t", c(1800, 1850, 1870, 1890, 1910, 1930, 1950, 1970, 1975, 1980, 1985, 1990, 1995)),
`Population (milliards)` = c("N(t)", c(0.91, 1.13, 1.30, 1.49, 1.70, 2.02, 2.51, 3.62, 3.97, 4.41, 4.84, 5.29, 5.75)),
`Intervalle de temps` = c("T","-",c(50,20,20), c(rep(NA, times= 9))),
`Population au recensement précédent` = c("N(t-T)","-" ,c(0.91, 1.13, 1.30, 1.49, 1.70, 2.02, 2.51, 3.62, 3.97, 4.41, 4.84, 5.29)),
`Taux de croissance en T années` = c("N(t)/N(t-T)","-",1.24176, rep(NA, times=11)),
`Taux de croissance annuel (R)` = c("[N(t)/N(t-T)]^(1/T)", "-", 1.00434, rep(NA, times=11)),
# Avoid converting strings to factors
check.names = FALSE)
View(table_1_3_df)
runApp()
#Faire rouler le script pour l'interface de l'utilisateur
source("ui.R")
#Faire rouler le script pour les graphiques et tableaux dynamiques
source("server.R")
# Run the application
shinyApp(ui = ui, server = server)
#--- Table 1.3
table_1_3_df <- data.frame(
`Année` = c("t", c(1800, 1850, 1870, 1890, 1910, 1930, 1950, 1970, 1975, 1980, 1985, 1990, 1995)),
`Population (milliards)` = c("N(t)", c(0.91, 1.13, 1.30, 1.49, 1.70, 2.02, 2.51, 3.62, 3.97, 4.41, 4.84, 5.29, 5.75)),
`Intervalle de temps` = c("T","-",c(50,20,20), c(rep(NA, times= 9))),
`Population au recensement précédent` = c("N(t-T)","-" ,c(0.91, 1.13, 1.30, 1.49, 1.70, 2.02, 2.51, 3.62, 3.97, 4.41, 4.84, 5.29)),
`Taux de croissance en T années` = c("N(t)/N(t-T)","-",1.24176, rep(NA, times=11)),
`Taux de croissance annuel (R)` = c("[N(t)/N(t-T)]^(1/T)", "-", 1.00434, rep(NA, times=11)),
# Avoid converting strings to factors
check.names = FALSE)
kbl(table_1_3_df) %>%
kable_styling()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("rhandsontable")
library(rhandsontable)
runApp()
runApp()
#--- Plot and table
# Initial empty data frame with specified column names
values <- reactiveValues(data = data.frame(`Année` = c(1850, 1870, 1890, 1910, 1930, 1950, 1970, 1975, 1980, 1985, 1990, 1995), `Taux de croissance annuel` = c(1.00434, rep= NA, times= 9),  check.names = FALSE))
data.frame(`Année` = c(1850, 1870, 1890, 1910, 1930, 1950, 1970, 1975, 1980, 1985, 1990, 1995), `Taux de croissance annuel` = c(1.00434, rep= NA, times= 9),  check.names = FALSE)
data.frame(`Année` = c(1850, 1870, 1890, 1910, 1930, 1950, 1970, 1975, 1980, 1985, 1990, 1995), `Taux de croissance annuel` = c(1.00434, rep= NA, times= 11),  check.names = FALSE)
c(1.00434, rep= NA, times= 11)
data.frame(`Année` = c(1850, 1870, 1890, 1910, 1930, 1950, 1970, 1975, 1980, 1985, 1990, 1995), `Taux de croissance annuel` = c(1.00434, rep(NA, times= 11),  check.names = FALSE)
data.frame(`Année` = c(1850, 1870, 1890, 1910, 1930, 1950, 1970, 1975, 1980, 1985, 1990, 1995), `Taux de croissance annuel` = c(1.00434, rep(NA, times= 11),  check.names = FALSE)
data.frame(`Année` = c(1850, 1870, 1890, 1910, 1930, 1950, 1970, 1975, 1980, 1985, 1990, 1995), `Taux de croissance annuel` = c(1.00434, rep(NA, times= 11)),  check.names = FALSE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#Faire rouler le script pour l'interface de l'utilisateur
source("ui.R")
#Faire rouler le script pour les graphiques et tableaux dynamiques
source("server.R")
# Run the application
shinyApp(ui = ui, server = server)
#Faire rouler le script pour l'interface de l'utilisateur
source("ui.R")
#Faire rouler le script pour les graphiques et tableaux dynamiques
source("server.R")
# Run the application
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
#Faire rouler le script pour l'interface de l'utilisateur
source("ui.R")
#Faire rouler le script pour l'interface de l'utilisateur
source("ui.R")
#Faire rouler le script pour les graphiques et tableaux dynamiques
source("server.R")
# Run the application
shinyApp(ui = ui, server = server)
#Faire rouler le script pour l'interface de l'utilisateur
source("ui.R")
#Faire rouler le script pour les graphiques et tableaux dynamiques
source("server.R")
# Run the application
shinyApp(ui = ui, server = server)
#Faire rouler le script pour l'interface de l'utilisateur
source("ui.R")
#Faire rouler le script pour les graphiques et tableaux dynamiques
source("server.R")
# Run the application
shinyApp(ui = ui, server = server)
shiny::runApp()
#Faire rouler le script pour l'interface de l'utilisateur
source("ui.R")
#Faire rouler le script pour l'interface de l'utilisateur
source("ui.R")
library(rhandsontable)
#Faire rouler le script pour l'interface de l'utilisateur
source("ui.R")
#Faire rouler le script pour les graphiques et tableaux dynamiques
source("server.R")
# Run the application
shinyApp(ui = ui, server = server)
runApp()
# Run the application
shinyApp(ui = ui, server = server)
runApp()
# Run the application
shinyApp(ui = ui, server = server)
runApp()
data = data.frame(`Année` = as.integer(c(1850, 1870, 1890, 1910, 1930, 1950, 1970, 1975, 1980, 1985, 1990, 1995)), `Taux de croissance annuel` = round(c(1.00434, rep(NA, times= 11)), digits = 5),  check.names = FALSE)
View(data)
nrow(values$data)
#--- Plot and table
# Initial empty data frame with specified column names
values <- reactiveValues(data = data.frame(`Année` = as.integer(c(1850, 1870, 1890, 1910, 1930, 1950, 1970, 1975, 1980, 1985, 1990, 1995)), `Taux de croissance annuel` = round(c(1.00434, rep(NA, times= 11)), digits = 5),  check.names = FALSE))
View(values)
nrow(values$data) > 0
req(nrow(values$data) > 0)
#--- Plot and table
# Initial empty data frame with specified column names
values <- reactiveValues(data = data.frame(`Année` = as.integer(c(1850, 1870, 1890, 1910, 1930, 1950, 1970, 1975, 1980, 1985, 1990, 1995)), `Taux de croissance annuel` = round(c(1.00434, rep(NA, times= 11)), digits = 5),  check.names = FALSE))
renderPlot({
req(nrow(values$data) > 0) # Require that the data frame is not empty
ggplot(values$data, aes(x = `Année`, y = `Taux de croissance annuel`)) +
geom_line(color= "steelblue4", size=1) +
labs(x = "Année", y = "Taux de croissance annuel") +
theme_classic()
})
output$plot <- renderPlot({
req(nrow(values$data) > 0) # Require that the data frame is not empty
ggplot(values$data, aes(x = `Année`, y = `Taux de croissance annuel`)) +
geom_line(color= "steelblue4", size=1) +
labs(x = "Année", y = "Taux de croissance annuel") +
theme_classic()
})
plot <- renderPlot({
req(nrow(values$data) > 0) # Require that the data frame is not empty
ggplot(values$data, aes(x = `Année`, y = `Taux de croissance annuel`)) +
geom_line(color= "steelblue4", size=1) +
labs(x = "Année", y = "Taux de croissance annuel") +
theme_classic()
})
plot
runApp()
runApp()
#--- Plot and table
# Initial empty data frame with specified column names
initial_df <- data.frame(`Année` = as.integer(c(1850, 1870, 1890, 1910, 1930, 1950, 1970, 1975, 1980, 1985, 1990, 1995)), `Taux de croissance annuel` = round(c(1.00434, rep(NA, times= 11)), digits = 5),  check.names = FALSE)
View(initial_df)
# Reactive value to store the data
reactive_data <- reactiveVal(initial_df)
runApp()
values$data
#--- Plot and table
# Initial empty data frame with specified column names
values <- reactiveValues(data= data.frame(`Année` = as.integer(c(1850, 1870, 1890, 1910, 1930, 1950, 1970, 1975, 1980, 1985, 1990, 1995)), `Taux de croissance annuel` = round(c(1.00434, rep(NA, times= 11)), digits = 5),  check.names = FALSE))
values$data
runApp()
runApp()
runApp()
runApp()
#--- Plot and table
# Initial empty data frame with specified column names
data <- data.frame(annee= as.integer(c(1850, 1870, 1890, 1910, 1930, 1950, 1970, 1975, 1980, 1985, 1990, 1995)), taux_croissance=  round(c(1.00434, rep(NA, times= 11)), digits = 5))
View(data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
salut_(a) <- a
#--- Table 1.4
# Initial empty data frame with specified column names
data_1_4 <- data.frame(Annee= as.integer(c(1975,1985, 1995)), Taille_population_milliards= c(3.97, 4.84, 5.75),
Taux_de_croissance_annuel_R= NA,
Nombre_individus_en_plus_chaque_annee= NA)
runApp()
runApp()
#--- Table 1.4
# Initial empty data frame with specified column names
data_1_4 <- data.frame(Annee= as.integer(c(1975,1985, 1995)), Taille_population_milliards= c(3.97, 4.84, 5.75),
Taux_de_croissance_annuel_R= NA,
Nombre_individus_en_plus_chaque_annee= NA)
View(data_1_4)
#--- Table 1.4
# Initial empty data frame with specified column names
data_1_4 <- data.frame(Annee= as.integer(c(1975,1985, 1995)), Taille_population_milliards= c(3.97, 4.84, 5.75),
Taux_de_croissance_annuel_R= numeric(),
Nombre_individus_en_plus_chaque_annee= numeric())
#--- Table 1.4
# Initial empty data frame with specified column names
data_1_4 <- data.frame(Annee= as.integer(c(1975,1985, 1995)), Taille_population_milliards= c(3.97, 4.84, 5.75),
Taux_de_croissance_annuel_R= NULL,
Nombre_individus_en_plus_chaque_annee= NULL)
#--- Table 1.4
# Initial empty data frame with specified column names
data_1_4 <- data.frame(Annee= as.integer(c(1975,1985, 1995)), Taille_population_milliards= c(3.97, 4.84, 5.75),
Taux_de_croissance_annuel_R= NA,
Nombre_individus_en_plus_chaque_annee= NA)
runApp()
shiny::runApp()
runApp()
runApp()
data_1_4 <- data.frame(Annee= as.integer(c(1975,1985, 1995)), Taille_population_milliards= c(3.97, 4.84, 5.75),
Taux_de_croissance_annuel_R= NA_integer_,
Nombre_individus_en_plus_chaque_annee= rep(0, times=3), stringsAsFactors = F)
data_1_4$Taux_de_croissance_annuel_R
class(data_1_4$Taux_de_croissance_annuel_R)
class(data_1_4$Annee)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
# Shiny App: Laboratoire 1
# Auteur: Louis Moisan
# Date: 18 Janvier 2024
#Faire rouler le script pour l'interface de l'utilisateur
source("ui.R")
#Faire rouler le script pour les graphiques et tableaux dynamiques
source("server.R")
# Run the application
shinyApp(ui = ui, server = server)
# Shiny App: Laboratoire 1
# Auteur: Louis Moisan
# Date: 18 Janvier 2024
#Faire rouler le script pour l'interface de l'utilisateur
source("ui.R")
#Faire rouler le script pour les graphiques et tableaux dynamiques
source("server.R")
# Run the application
shinyApp(ui = ui, server = server)
runApp()
runApp()
data_1_5 <- data.frame(
Annee= as.integer(c(1995, 2005, 2015, 2025, 2035)),
Fecondite_f= c(0.0273, NA,NA,NA,NA),
Taux_de_croissance_annuel_R= rep(0, times= 5),
Taux_de_croissance_par_decennie_R10= rep(0, times= 5),
Population_au_debut_decade_milliards= c(5.75, NA,NA,NA,NA),
Population_fin_decade= rep(0, times= 5))
View(data_1_5)
runApp()
shiny::runApp()
install.packages('rsconnect')
rsconnect::setAccountInfo(name='lmoisan',
token='635DAE45BE572F37D789092A2BC16D30',
secret='<SECRET>')
rsconnect::setAccountInfo(name='lmoisan', token='635DAE45BE572F37D789092A2BC16D30', secret='jRnq2YP3Imnng6IQ0qvdkYeQ0kpgpl3IdAXRO6rE')
# Shiny App: Laboratoire 1
# Auteur: Louis Moisan
# Date: 18 Janvier 2024
library(rsconnect)
deployApp()
#Faire rouler le script pour l'interface de l'utilisateur
source("ui.R")
#Faire rouler le script pour les graphiques et tableaux dynamiques
source("server.R")
# Run the application
shinyApp(ui = ui, server = server)
runApp('~/Documents/auxiliaire_enseignement/Developpement_labos/Laboratoire_2')
server <- function(input, output) {
#--------------------#
#### Exercice 2.1 ####
#--------------------#
# Store generated numbers and count
generatedData <- reactiveValues(
survival = round(runif(1), digits= 3),
fecundity = round(runif(1), digits= 3),
individual = 1
)
# Generate random numbers and update the table
observeEvent(input$generateButton, {
survival <- round(runif(1), digits= 3)
fecundity <- round(runif(1), digits = 3)
generatedData$survival <- c(generatedData$survival, survival)
generatedData$fecundity <- c(generatedData$fecundity, fecundity)
generatedData$individual <- c(generatedData$individual, input$generateButton)
})
# Display the table
output$numbersTable <- renderDataTable({
data.frame(
Individu = 1:length(generatedData$individual),
`survie` = generatedData$survival,
`fécondité` = generatedData$fecundity
)
})
#--------------------#
#### Exercice 2.2 ####
#--------------------#
output$growthPlot_2_2 <- renderPlot({
time_steps <- seq(0, input$timeSteps_2_2)
initial_abundance <- input$initialAbundance_2_2
growth_rate <- input$growthRate_2_2
num_replicates <- input$replicates_2_2
if(num_replicates == 0){
num_replicates <- 1
}
# Create an empty data frame to store all replicates data
df_2_2 <- data.frame()
for (i in 1:num_replicates) {
population_size <- initial_abundance * exp(growth_rate * time_steps)
df <- rbind(df, data.frame(Time = time_steps, Population = population_size, Replicate = as.factor(i)))
}
ggplot(df_2_2, aes(x = round(Time, digits= 0), y =  round(Population, digits= 0), color = Replicate)) +
geom_line() +
labs(x = "Années", y = "Taille de population") +
theme_minimal()+
theme(legend.position = "none")
})
}
runApp('~/Documents/auxiliaire_enseignement/Developpement_labos/Laboratoire_2')
runApp('~/Documents/auxiliaire_enseignement/Developpement_labos/Laboratoire_2')
#Stochasticité démographique
stochasticite_2_2
runApp('~/Documents/auxiliaire_enseignement/Developpement_labos/Laboratoire_2')
runApp('~/Documents/auxiliaire_enseignement/Developpement_labos/Laboratoire_2')
runApp('~/Documents/auxiliaire_enseignement/Developpement_labos/Laboratoire_2')
runApp('~/Documents/auxiliaire_enseignement/Developpement_labos/Laboratoire_2')
runApp('~/Documents/auxiliaire_enseignement/Developpement_labos/Laboratoire_2')
runApp('~/Documents/auxiliaire_enseignement/Developpement_labos/Laboratoire_2')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
Sys.setenv(TZ="America/Montreal")
depart <- Sys.setenv(TZ="America/Montreal")
depart
runApp()
